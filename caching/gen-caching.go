// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package caching

import (
	"context"
	"log"

	aw "github.com/deanishe/awgo"
	"google.golang.org/api/container/v1"
)

type ContainerClusterArrayFetcher = func(ctx context.Context, gcpProject string) ([]*container.Cluster, error)

func LoadContainerClusterArrayFromCache(wf *aw.Workflow, ctx context.Context, cacheName string, fetcher ContainerClusterArrayFetcher, forceFetch bool, rawQuery string, gcpProject string) []*container.Cluster {
	results := []*container.Cluster{}
	if forceFetch {
		log.Printf("fetching from gcp ...")

		results, err := fetcher(ctx, gcpProject)
		if err != nil {
			log.Printf("failed to fetcher : %v", err)
			panic(err)
		}

		log.Printf("storing %d results with cache key `%s` to %s ...", len(results), cacheName, wf.CacheDir())
		if err := wf.Cache.StoreJSON(cacheName, results); err != nil {
			panic(err)
		}

		return results
	}

	err := handleExpiredCache(wf, cacheName, rawQuery)
	if err != nil {
		return []*container.Cluster{}
	}

	if wf.Cache.Exists(cacheName) {
		log.Printf("using cache with key `%s` in %s ...", cacheName, wf.CacheDir())
		if err := wf.Cache.LoadJSON(cacheName, &results); err != nil {
			panic(err)
		}
	} else {
		log.Printf("cache with key `%s` did not exist in %s ...", cacheName, wf.CacheDir())
		wf.NewItem("Fetching ...").
			Icon(aw.IconInfo)
	}

	return results
}
